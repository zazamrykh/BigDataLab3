name: Deploy and Test Model Container with Vault Integration

on:
  workflow_dispatch:  # запуск вручную по кнопке

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Pull Docker image
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/lab3-vault-app:latest

    - name: Start containers with docker compose using parameters
      run: |
        chmod +x ./start.sh
        ./start.sh \
          --db-user=${{ secrets.DB_USER }} \
          --db-password=${{ secrets.DB_PASSWORD }} \
          --db-name=${{ secrets.DB_NAME }} \
          --db-port=${{ secrets.DB_PORT }}

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        for i in {1..30}; do
          sleep 10
          echo "Attempt $i..."

          # Check if API is ready
          HEALTH_RESPONSE=$(curl -s http://localhost:8000/health || true)
          echo "Health response: $HEALTH_RESPONSE"

          if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
            echo "API is ready!"
            break
          fi

          if [ $i -eq 30 ]; then
            echo "API did not become ready in time"
            docker compose logs
            exit 1
          fi
        done

    - name: Run functional tests
      run: |
        # Test 1: Health check
        echo "Test 1: Health check"
        HEALTH_RESPONSE=$(curl -s http://localhost:8000/health)
        echo "Health response: $HEALTH_RESPONSE"
        echo "$HEALTH_RESPONSE" | jq .

        # Check if Vault is connected in health check
        VAULT_CONNECTED=$(echo "$HEALTH_RESPONSE" | jq -r '.vault_connected')
        if [ "$VAULT_CONNECTED" = "true" ]; then
          echo "Vault connection verified in health check!"
        else
          echo "Vault connection not verified in health check!"
          docker compose logs vault
          exit 1
        fi

        # Test 2: Vault status endpoint
        echo "Test 2: Vault status endpoint"
        VAULT_STATUS_RESPONSE=$(curl -s http://localhost:8000/vault-status || echo '{"error": "Failed to connect"}')
        echo "Vault status response: $VAULT_STATUS_RESPONSE"

        if [[ "$VAULT_STATUS_RESPONSE" == *"connected"*"true"* ]]; then
          echo "Vault status endpoint working correctly!"
        else
          echo "Vault status endpoint not working correctly!"
          docker compose logs vault
          exit 1
        fi

        # Test 3: Prediction endpoint
        echo "Test 3: Prediction endpoint"
        PREDICT_RESPONSE=$(curl -s -X POST "http://localhost:8000/predict" \
          -H "Content-Type: application/json" \
          -d '{"summary": "Great product!", "text": "This product works perfectly and I love it.", "HelpfulnessNumerator": 5, "HelpfulnessDenominator": 7}')
        echo "Prediction response: $PREDICT_RESPONSE"
        PREDICTION=$(echo "$PREDICT_RESPONSE" | jq -r '.prediction')

        # Test 4: Check if prediction was saved in database
        echo "Test 4: Check if prediction was saved in database"
        sleep 2  # Wait for the prediction to be saved
        PREDICTIONS_RESPONSE=$(curl -s http://localhost:8000/predictions)
        echo "Predictions response: $PREDICTIONS_RESPONSE"
        PREDICTIONS_COUNT=$(echo "$PREDICTIONS_RESPONSE" | jq '.predictions | length')

        # Check if all tests passed
        if [[ "$HEALTH_RESPONSE" == *"healthy"* ]] &&
           [ "$VAULT_CONNECTED" = "true" ] &&
           [[ "$VAULT_STATUS_RESPONSE" == *"connected"*"true"* ]] &&
           [ -n "$PREDICTION" ] &&
           [ "$PREDICTIONS_COUNT" -gt 0 ]; then
          echo "All functional tests passed!"
        else
          echo "Some functional tests failed!"
          exit 1
        fi

    - name: Stop containers
      if: always()
      run: docker compose down
